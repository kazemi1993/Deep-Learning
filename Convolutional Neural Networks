# # Convolutional Neural Networks 

# In[3]:


import pandas as pd
import numpy as np
get_ipython().run_line_magic('matplotlib', 'inline')
import matplotlib.pyplot as plt


# In[4]:


from keras.datasets import mnist
(X_train, y_train), (X_test, y_test) = mnist.load_data("..//mnist.npz")


# In[5]:


X_train.shape


# In[6]:


X_test.shape


# In[7]:


X_train[0]


# In[8]:


plt.imshow(X_train[0], cmap='gray')


# In[9]:


X_train = X_train.reshape(-1, 28*28)
X_test = X_test.reshape(-1, 28*28)


# In[10]:


X_train.shape


# In[11]:


X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /= 255.0
X_test /= 255.0


# In[12]:


X_train[0]


# In[13]:


from keras.utils.np_utils import to_categorical


# In[14]:


y_train_cat = to_categorical(y_train)
y_test_cat = to_categorical(y_test)


# In[15]:


y_train[0]


# In[16]:


y_train_cat[0]


# In[17]:


y_train_cat.shape


# In[18]:


y_test_cat.shape


# ### Fully connected on images

# In[19]:


from keras.models import Sequential
from keras.layers import Dense
import keras.backend as K

K.clear_session()

model = Sequential()
model.add(Dense(512, input_dim=28*28, activation='relu'))
model.add(Dense(256, activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(10, activation='softmax'))
model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])


# In[20]:


h = model.fit(X_train, y_train_cat, batch_size=128, epochs=10, verbose=1)


# In[21]:


plt.plot(h.history['accuracy'])
plt.title('Accuracy')
plt.xlabel('Epochs')


# In[22]:


test_accuracy = model.evaluate(X_test, y_test_cat)
test_accuracy


# ## Convolutional Neural Networks 

# In[23]:


import pandas as pd
import numpy as np
get_ipython().run_line_magic('matplotlib', 'inline')
import matplotlib.pyplot as plt


# In[24]:


from keras.utils.np_utils import to_categorical


# In[25]:


from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPool2D, Flatten
import keras.backend as K


# 
# 
# You've been hired by a shipping company to overhaul the way they route mail, parcels and packages. They want to build an image recognition system  capable of recognizing the digits in the zipcode on a package, so that it can be automatically routed to the correct location.
# You are tasked to build the digit recognition system. Luckily, you can rely on the MNIST dataset for the intial training of your model!
# 
# Build a deep convolutional neural network with at least two convolutional and two pooling layers before the fully connected layer.
# 
# - Start from the network we have just built
# - Insert a `Conv2D` layer after the first `MaxPool2D`, give it 64 filters.
# - Insert a `MaxPool2D` after that one
# - Insert an `Activation` layer
# - retrain the model
# - does performance improve?
# - how many parameters does this new model have? More or less than the previous model? Why?
# - how long did this second model take to train? Longer or shorter than the previous model? Why?
# - did it perform better or worse than the previous model?

# In[26]:


from keras.datasets import mnist


# In[28]:


(X_train, y_train), (X_test, y_test) = mnist.load_data("C:\\Users\\kazem\\Desktop\\computer vision\\DATA\\mnist.npz")


# In[29]:


X_test.shape


# In[30]:


X_train.shape


# In[31]:


X_train[0]


# In[32]:


plt.imshow(X_train[0], cmap='gray')


# In[33]:


X_train = X_train.astype('float32') / 255.0
X_test = X_test.astype('float32') / 255.0

X_train = X_train.reshape(-1, 28, 28, 1)
X_test = X_test.reshape(-1, 28, 28, 1)

y_train_cat = to_categorical(y_train, 10)
y_test_cat = to_categorical(y_test, 10)


# In[34]:


K.clear_session()

model = Sequential()

model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(MaxPool2D(pool_size=(2, 2)))

model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2)))

model.add(Flatten())

model.add(Dense(128, activation='relu'))

model.add(Dense(10, activation='softmax'))

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])


# In[35]:


model.summary()


# In[36]:


model.fit(X_train, y_train_cat, batch_size=128,
          epochs=1, verbose=1)


# In[37]:


model.evaluate(X_test, y_test_cat)


# 
# 
# Pleased with your performance with the digits recognition task, your boss decides to challenge you with a harder task. Their online branch allows people to upload images to a website that generates and prints a postcard that is shipped to destination. Your boss would like to know what images people are loading on the site in order to provide targeted advertising on the same page, so he asks you to build an image recognition system capable of recognizing a few objects. Luckily for you, there's a dataset ready made with a collection of labeled images. This is the [Cifar 10 Dataset](http://www.cs.toronto.edu/~kriz/cifar.html), a very famous dataset that contains images for 10 different categories:
# 
# - airplane 										
# - automobile 										
# - bird 										
# - cat 										
# - deer 										
# - dog 										
# - frog 										
# - horse 										
# - ship 										
# - truck
# 
# In this exercise we will reach the limit of what you can achieve on your laptop and get ready for the next session on cloud GPUs.
# 
# Here's what you have to do:
# - load the cifar10 dataset using `keras.datasets.cifar10.load_data()`
# - display a few images, see how hard/easy it is for you to recognize an object with such low resolution
# - check the shape of X_train, does it need reshape?
# - check the scale of X_train, does it need rescaling?
# - check the shape of y_train, does it need reshape?
# - build a model with the following architecture, and choose the parameters and activation functions for each of the layers:
#     - conv2d
#     - conv2d
#     - maxpool
#     - conv2d
#     - conv2d
#     - maxpool
#     - flatten
#     - dense
#     - output
# - compile the model and check the number of parameters
# - attempt to train the model with the optimizer of your choice. How fast does training proceed?
# - If training is too slow (as expected) stop the execution and move to the next session!

# In[43]:


from keras.datasets import cifar10


# In[44]:


# put cifar10 dataset in C:\Users\kazem\.keras\datasets
(X_train, y_train), (X_test, y_test) = cifar10.load_data()


# In[45]:


X_train.shape


# In[46]:


X_test.shape


# In[47]:


plt.imshow(X_train[3])


# In[48]:


X_train = X_train.astype('float32') / 255.0
X_test = X_test.astype('float32') / 255.0


# In[49]:


y_train.shape


# In[50]:


y_train_cat = to_categorical(y_train, 10)
y_test_cat = to_categorical(y_test, 10)


# In[51]:


y_train_cat.shape


# In[52]:


model = Sequential()
model.add(Conv2D(32, (3, 3),
                 padding='same',
                 input_shape=(32, 32, 3),
                 activation='relu'))
model.add(Conv2D(32, (3, 3), activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2)))

model.add(Conv2D(64, (3, 3), padding='same', activation='relu'))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(512, activation='relu'))
model.add(Dense(10, activation='softmax'))


# In[53]:


model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])


# In[54]:


model.summary()


# In[55]:


model.fit(X_train, y_train_cat,
          batch_size=32,
          epochs=1,
          validation_data=(X_test, y_test_cat),
          shuffle=True)

